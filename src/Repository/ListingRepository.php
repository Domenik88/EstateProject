<?php

namespace App\Repository;

use App\Entity\Listing;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @method Listing|null find($id, $lockMode = null, $lockVersion = null)
 * @method Listing|null findOneBy(array $criteria, array $orderBy = null)
 * @method Listing[]    findAll()
 * @method Listing[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ListingRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Listing::class);
    }

    public function count(array $criteria)
    {
        return parent::count($criteria); // TODO: Change the autogenerated stub
    }

    public function deleteListings(string $feedId)
    {
        $query = $this->getEntityManager()->createQuery("UPDATE App\Entity\Listing l SET l.deletedDate = current_timestamp() where l.feedID = :feedId and l.deletedDate IS NULL and not exists (select lm.feedListingId from App\Entity\ListingMaster lm where lm.feedListingId = l.feedListingID and lm.feedId = l.feedID)");
        $query->setParameter('feedId', $feedId);
        $query->execute();
    }

    public function getMissingListingsFromDdfListingMaster()
    {
        $rsm = new ResultSetMapping();
        $this->getEntityManager()->createNativeQuery("insert into listing(feed_id,feed_listing_id,status,processing_status) select lm.feed_id, lm.feed_listing_id, 'new' as status,'none' as processing_status from listing_master lm on conflict (feed_id,feed_listing_id) do nothing",$rsm)->execute();
    }
}
